/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import no.sintef.jasm.*;
import no.sintef.jasm.ext.*;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;

/**
 * Definition for type : MotionDetectors
 **/
public class MotionDetectors extends Component implements IMotionDetectors_setup {

private boolean debug = false;
public boolean isDebug() {return debug;}
public void setDebug(boolean debug) {this.debug = debug;}
public String toString() {
String result = "instance " + getName() + "\n";
result += "";
return result;
}

public synchronized void StartListen_via_setup(String MqttSetup_StartListen_ch_var, short MqttSetup_StartListen_mid_var){
final Event _msg = StartListenType.instantiate(MqttSetup_StartListen_ch_var, MqttSetup_StartListen_mid_var);
_msg.setPort(setup_port);
receive(_msg);
}

private void sendMotionOn_via_Motions(short MotionMsg_MotionOn_mid_var){
Motions_port.send(MotionOnType.instantiate(MotionMsg_MotionOn_mid_var));
}

private void sendMotionOff_via_Motions(short MotionMsg_MotionOff_mid_var){
Motions_port.send(MotionOffType.instantiate(MotionMsg_MotionOff_mid_var));
}

//Attributes
//Ports
private Port setup_port;
private Port Motions_port;
//Message types
protected final StartListenMessageType StartListenType = new StartListenMessageType();
protected final MotionOnMessageType MotionOnType = new MotionOnMessageType();
protected final MotionOffMessageType MotionOffType = new MotionOffMessageType();
//Empty Constructor
public MotionDetectors() {
super();
}

//Getters and Setters for non readonly/final attributes
//Getters for Ports
public Port getSetup_port() {
return setup_port;
}
public Port getMotions_port() {
return Motions_port;
}
private CompositeState buildMotionDetectors_MotionDetector_behavior(){
final AtomicState state_MotionDetectors_MotionDetector_behavior_Init = new AtomicState("Init");
Transition h1001365734 = new Transition();
h1001365734.from(state_MotionDetectors_MotionDetector_behavior_Init).to(state_MotionDetectors_MotionDetector_behavior_Init);
h1001365734.event(StartListenType);
h1001365734.port(setup_port);
h1001365734.action((Event e)->{
final StartListenMessageType.StartListenMessage StartListen = (StartListenMessageType.StartListenMessage) e;
new MqttSubscriber().subTo("tcp://localhost:1883","motion/1", this::sendMotionOn_via_Motions);
});

final CompositeState state_MotionDetectors_MotionDetector_behavior = new CompositeState("MotionDetector_behavior");
state_MotionDetectors_MotionDetector_behavior.add(state_MotionDetectors_MotionDetector_behavior_Init);
state_MotionDetectors_MotionDetector_behavior.initial(state_MotionDetectors_MotionDetector_behavior_Init);
return state_MotionDetectors_MotionDetector_behavior;
}

public Component buildBehavior(String session, Component root) {
if (root == null) {
//Init ports
setup_port = new Port("setup", this);
Motions_port = new Port("Motions", this);
} else {
setup_port = ((MotionDetectors)root).setup_port;
Motions_port = ((MotionDetectors)root).Motions_port;
}
if (session == null){
//Init state machine
behavior = buildMotionDetectors_MotionDetector_behavior();
}
return this;
}

}
