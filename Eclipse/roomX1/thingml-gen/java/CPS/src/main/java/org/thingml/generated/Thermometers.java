/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import no.sintef.jasm.*;
import no.sintef.jasm.ext.*;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;

/**
 * Definition for type : Thermometers
 **/
public class Thermometers extends Component implements IThermometers_setup {

private boolean debug = false;
public boolean isDebug() {return debug;}
public void setDebug(boolean debug) {this.debug = debug;}
public String toString() {
String result = "instance " + getName() + "\n";
result += "";
return result;
}

public synchronized void StartListen_via_setup(String MqttSetup_StartListen_ch_var, short MqttSetup_StartListen_mid_var){
final Event _msg = StartListenType.instantiate(MqttSetup_StartListen_ch_var, MqttSetup_StartListen_mid_var);
_msg.setPort(setup_port);
receive(_msg);
}

private void sendTemp_via_Temprature(short ThermometerMsg_Temp_temp_var){
Temprature_port.send(TempType.instantiate(ThermometerMsg_Temp_temp_var));
}

//Attributes
//Ports
private Port setup_port;
private Port Temprature_port;
//Message types
protected final StartListenMessageType StartListenType = new StartListenMessageType();
protected final TempMessageType TempType = new TempMessageType();
//Empty Constructor
public Thermometers() {
super();
}

//Getters and Setters for non readonly/final attributes
//Getters for Ports
public Port getSetup_port() {
return setup_port;
}
public Port getTemprature_port() {
return Temprature_port;
}
private CompositeState buildThermometers_MotionDetector_behavior(){
final AtomicState state_Thermometers_MotionDetector_behavior_Init = new AtomicState("Init");
Transition h1853005788 = new Transition();
h1853005788.from(state_Thermometers_MotionDetector_behavior_Init).to(state_Thermometers_MotionDetector_behavior_Init);
h1853005788.event(StartListenType);
h1853005788.port(setup_port);
h1853005788.action((Event e)->{
final StartListenMessageType.StartListenMessage StartListen = (StartListenMessageType.StartListenMessage) e;
new MqttSubscriber().subTo("tcp://localhost:1883","motion/1", this::sendTemp_via_Temprature);
});

final CompositeState state_Thermometers_MotionDetector_behavior = new CompositeState("MotionDetector_behavior");
state_Thermometers_MotionDetector_behavior.add(state_Thermometers_MotionDetector_behavior_Init);
state_Thermometers_MotionDetector_behavior.initial(state_Thermometers_MotionDetector_behavior_Init);
return state_Thermometers_MotionDetector_behavior;
}

public Component buildBehavior(String session, Component root) {
if (root == null) {
//Init ports
setup_port = new Port("setup", this);
Temprature_port = new Port("Temprature", this);
} else {
setup_port = ((Thermometers)root).setup_port;
Temprature_port = ((Thermometers)root).Temprature_port;
}
if (session == null){
//Init state machine
behavior = buildThermometers_MotionDetector_behavior();
}
return this;
}

}
