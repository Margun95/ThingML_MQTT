/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import no.sintef.jasm.*;
import no.sintef.jasm.ext.*;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;

/**
 * Definition for type : Human
 **/
public class Human extends Component  {

private boolean debug = false;
public boolean isDebug() {return debug;}
public void setDebug(boolean debug) {this.debug = debug;}
public String toString() {
String result = "instance " + getName() + "\n";
result += "";
return result;
}

private void sendSwitchOn_via_send_cmd(short SwitchMsg_SwitchOn_sid_var){
send_cmd_port.send(SwitchOnType.instantiate(SwitchMsg_SwitchOn_sid_var));
}

private void sendSwitchOff_via_send_cmd(short SwitchMsg_SwitchOff_sid_var){
send_cmd_port.send(SwitchOffType.instantiate(SwitchMsg_SwitchOff_sid_var));
}

private void sendStartListen_via_send_cmd(String MqttSetup_StartListen_ch_var, short MqttSetup_StartListen_mid_var){
send_cmd_port.send(StartListenType.instantiate(MqttSetup_StartListen_ch_var, MqttSetup_StartListen_mid_var));
}

//Attributes
//Ports
private Port send_cmd_port;
//Message types
protected final SwitchOnMessageType SwitchOnType = new SwitchOnMessageType();
protected final SwitchOffMessageType SwitchOffType = new SwitchOffMessageType();
protected final StartListenMessageType StartListenType = new StartListenMessageType();
//Empty Constructor
public Human() {
super();
}

//Getters and Setters for non readonly/final attributes
//Getters for Ports
public Port getSend_cmd_port() {
return send_cmd_port;
}
public Component buildBehavior(String session, Component root) {
if (root == null) {
//Init ports
send_cmd_port = new Port("send_cmd", this);
} else {
send_cmd_port = ((Human)root).send_cmd_port;
}
if (session == null){
//Init state machine
}
return this;
}

}
