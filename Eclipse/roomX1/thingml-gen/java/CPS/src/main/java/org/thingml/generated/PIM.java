/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import no.sintef.jasm.*;
import no.sintef.jasm.ext.*;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;

/**
 * Definition for type : PIM
 **/
public class PIM extends Component implements IPIM_human_input, IPIM_Temprature, IPIM_Motions {

private boolean debug = false;
public boolean isDebug() {return debug;}
public void setDebug(boolean debug) {this.debug = debug;}
public String toString() {
String result = "instance " + getName() + "\n";
result += "";
return result;
}

public synchronized void SwitchOn_via_human_input(short SwitchMsg_SwitchOn_sid_var){
final Event _msg = SwitchOnType.instantiate(SwitchMsg_SwitchOn_sid_var);
_msg.setPort(human_input_port);
receive(_msg);
}

public synchronized void SwitchOff_via_human_input(short SwitchMsg_SwitchOff_sid_var){
final Event _msg = SwitchOffType.instantiate(SwitchMsg_SwitchOff_sid_var);
_msg.setPort(human_input_port);
receive(_msg);
}

public synchronized void MotionOn_via_Motions(short MotionMsg_MotionOn_mid_var){
final Event _msg = MotionOnType.instantiate(MotionMsg_MotionOn_mid_var);
_msg.setPort(Motions_port);
receive(_msg);
}

public synchronized void Temp_via_Temprature(short ThermometerMsg_Temp_temp_var){
final Event _msg = TempType.instantiate(ThermometerMsg_Temp_temp_var);
_msg.setPort(Temprature_port);
receive(_msg);
}

//Attributes
//Ports
private Port human_input_port;
private Port Motions_port;
private Port Temprature_port;
//Message types
protected final SwitchOnMessageType SwitchOnType = new SwitchOnMessageType();
protected final SwitchOffMessageType SwitchOffType = new SwitchOffMessageType();
protected final MotionOnMessageType MotionOnType = new MotionOnMessageType();
protected final MotionOffMessageType MotionOffType = new MotionOffMessageType();
protected final TempMessageType TempType = new TempMessageType();
//Empty Constructor
public PIM() {
super();
}

//Getters and Setters for non readonly/final attributes
//Getters for Ports
public Port getHuman_input_port() {
return human_input_port;
}
public Port getMotions_port() {
return Motions_port;
}
public Port getTemprature_port() {
return Temprature_port;
}
private CompositeState buildPIM_PIM_behavior(){
final AtomicState state_PIM_PIM_behavior_Init = new AtomicState("Init");
Transition h1017666498 = new Transition();
h1017666498.from(state_PIM_PIM_behavior_Init).to(state_PIM_PIM_behavior_Init);
h1017666498.event(SwitchOnType);
h1017666498.port(human_input_port);
h1017666498.action((Event e)->{
final SwitchOnMessageType.SwitchOnMessage SwitchOn = (SwitchOnMessageType.SwitchOnMessage) e;
MqttSubscriber.sendComand("tcp://localhost:1883","state/light/1", "ON");
});

Transition h100957390 = new Transition();
h100957390.from(state_PIM_PIM_behavior_Init).to(state_PIM_PIM_behavior_Init);
h100957390.event(SwitchOffType);
h100957390.port(human_input_port);
h100957390.action((Event e)->{
final SwitchOffMessageType.SwitchOffMessage SwitchOff = (SwitchOffMessageType.SwitchOffMessage) e;
MqttSubscriber.sendComand("tcp://localhost:1883","state/light/1", "OFF");
});

Transition h1702739034 = new Transition();
h1702739034.from(state_PIM_PIM_behavior_Init).to(state_PIM_PIM_behavior_Init);
h1702739034.event(MotionOnType);
h1702739034.port(Motions_port);
h1702739034.action((Event e)->{
final MotionOnMessageType.MotionOnMessage MotionOn = (MotionOnMessageType.MotionOnMessage) e;
MqttSubscriber.sendComand("tcp://localhost:1883","state/light/1", "ON");
});

Transition h1559969218 = new Transition();
h1559969218.from(state_PIM_PIM_behavior_Init).to(state_PIM_PIM_behavior_Init);
h1559969218.event(TempType);
h1559969218.port(Temprature_port);
h1559969218.action((Event e)->{
final TempMessageType.TempMessage Temp = (TempMessageType.TempMessage) e;

});

final CompositeState state_PIM_PIM_behavior = new CompositeState("PIM_behavior");
state_PIM_PIM_behavior.add(state_PIM_PIM_behavior_Init);
state_PIM_PIM_behavior.initial(state_PIM_PIM_behavior_Init);
return state_PIM_PIM_behavior;
}

public Component buildBehavior(String session, Component root) {
if (root == null) {
//Init ports
human_input_port = new Port("human_input", this);
Motions_port = new Port("Motions", this);
Temprature_port = new Port("Temprature", this);
} else {
human_input_port = ((PIM)root).human_input_port;
Motions_port = ((PIM)root).Motions_port;
Temprature_port = ((PIM)root).Temprature_port;
}
if (session == null){
//Init state machine
behavior = buildPIM_PIM_behavior();
}
return this;
}

}
