package org.thingml.generated;

import java.util.function.Consumer;
import java.util.function.Function;

import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;
import org.eclipse.paho.client.mqttv3.MqttCallback;
import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttException;
import org.eclipse.paho.client.mqttv3.MqttMessage;

public class MqttSubscriber implements MqttCallback {

MqttClient client;
public Consumer<Short> f;

public MqttSubscriber() {
}

public void subTo(String serverAdr, String subj,Consumer<Short> f) {
    try {
    	this.f=f;
        client = new MqttClient(serverAdr, MqttClient.generateClientId());
        client.connect();
        client.setCallback(this);
        client.subscribe(subj);
        
      /*//--------------test sending msg to mqtt----------------
        MqttMessage message = new MqttMessage();
        message.setPayload("A single message from my computer fff".getBytes());
        client.publish("foo", message);
       */
    	
    
    } catch (MqttException e) {
       	e.printStackTrace();
    }
}

public static MqttClient msgClient=null;

public static void sendComand(String serverAdr, String subj, String msg) {
	 try {
		 	MqttClient client;
		 if(msgClient==null) {
			 client = new MqttClient(serverAdr, MqttClient.generateClientId()); 
		 }else{
			 client=msgClient;
		 }
		 
	       client.connect();
	        
	        MqttMessage message = new MqttMessage();
	        message.setPayload(msg.getBytes());
	        client.publish(subj, message);
	    	
	    
	    } catch (MqttException e) {
	       	e.printStackTrace();
	    }
}

public void connectionLost(Throwable cause) {
    // TODO Auto-generated method stub
}

public void messageArrived(String topic, MqttMessage message)
        throws Exception {
	short sh=1;
	try {
	    sh = (short)Integer.parseInt(message.toString());
		f.accept(sh);
	} catch (NumberFormatException e) {  
		if(message.toString().equals("ON")) {
			sh=1;
			f.accept(sh);
		}
	}
	System.out.println(message);   
}

/* 
 <dependency>
        <groupId>org.eclipse.paho</groupId>
        <artifactId>org.eclipse.paho.client.mqttv3</artifactId>
        <version>1.2.0</version>
 </dependency>
 new MqttSubscriber().subTo("tcp://localhost:1883","#", this::sendSwitchOff_via_get_sensor);
 */
public void deliveryComplete(IMqttDeliveryToken token) {
    // TODO Auto-generated method stub
}

}